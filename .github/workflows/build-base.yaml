name: Build and Push Base Images

env:
  DOCKERHUB_REPO: leonhrt/dev-images-hub
  IMAGE_AMD64: nutria-testagent-base-amd64
  IMAGE_ARM64: nutria-testagent-base-arm64
  MANIFEST: nutria-testagent-base

on:
  push:
    branches:
      - main
    paths:
      - 'Dockerfile.base'
      - 'poetry.lock'
      - 'pyproject.toml'
  workflow_dispatch:

jobs:
  build-amd64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push AMD64 base image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.base
          platforms: linux/amd64
          push: true
          tags: ${{ env.DOCKERHUB_REPO }}:${{ env.IMAGE_AMD64 }}
          cache-from: type=registry,ref=${{ env.DOCKERHUB_REPO }}:${{ env.IMAGE_AMD64 }}-cache
          cache-to: type=registry,ref=${{ env.DOCKERHUB_REPO }}:${{ env.IMAGE_AMD64 }}-cache,mode=max

  build-arm64:
    runs-on: ubuntu-22.04-arm
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push ARM64 base image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.base
          platforms: linux/arm64
          push: true
          tags: ${{ env.DOCKERHUB_REPO }}:${{ env.IMAGE_ARM64 }}
          cache-from: type=registry,ref=${{ env.DOCKERHUB_REPO }}:${{ env.IMAGE_ARM64 }}-cache
          cache-to: type=registry,ref=${{ env.DOCKERHUB_REPO }}:${{ env.IMAGE_ARM64 }}-cache,mode=max

  create-manifest:
    needs: 
      - build-amd64
      - build-arm64
    runs-on: ubuntu-latest
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Inspect source images
        run: |
          echo "Inspecting AMD64 image..."
          docker manifest inspect ${{ env.DOCKERHUB_REPO }}:${{ env.IMAGE_AMD64 }}
          
          echo "Inspection ARM64 image..."
          docker manifest inspect ${{ env.DOCKERHUB_REPO }}:${{ env.IMAGE_ARM64 }}
      - name: Create Multi-Architecture Manifest
        run: |
          docker buildx imagetools create \
            --tag ${{ env.DOCKERHUB_REPO }}:${{ env.MANIFEST }} \
            ${{ env.DOCKERHUB_REPO }}:${{ env.IMAGE_AMD64 }} \
            ${{ env.DOCKERHUB_REPO }}:${{ env.IMAGE_ARM64 }}
      
      - name: Verify new manifest
        run: |
          echo "Verifying new manifest..."
          docker manifest inspect ${{ env.DOCKERHUB_REPO }}:${{ env.MANIFEST }}

  notify-app-workflow:
    needs: create-manifest
    runs-on: ubuntu-latest
    steps:
      - name: Trigger App Workflow
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.REPO_GH_TOKEN }}
          event-type: base-workflow-completed
