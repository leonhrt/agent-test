name: Build and Push Base Images

env:
  DOCKERHUB_REPO: leonhrt/dev-images-hub
  BASE_IMAGE_AMD64: nutria-testagent-base-amd64
  BASE_IMAGE_ARM64: nutria-testagent-base-arm64
  BASE_MANIFEST: nutria-testagent-base
  APP_IMAGE_AMD64: nutria-testagent-app-amd64
  APP_IMAGE_ARM64: nutria-testagent-app-arm64
  APP_MANIFEST: nutria-testagent-app

on:
  push:
    branches:
      - main
    paths:
      - 'app/**'
      - 'Dockerfile.app'
      - 'Dockerfile.base'
      - 'poetry.lock'
      - 'pyproject.toml'
  workflow_dispatch:

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      base-changed: ${{ steps.changes.outputs.base-changed }}
      app-changed: ${{ steps.changes.outputs.app-changed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            base-changed:
              - 'Dockerfile.base'
              - 'poetry.lock'
              - 'pyproject.toml'
            app-changed:
              - 'app/**'
              - 'Dockerfile.app'

  # Base image build
  build-base-amd64:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.base-changed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push AMD64 base image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.base
          platforms: linux/amd64
          push: true
          tags: ${{ env.DOCKERHUB_REPO }}:${{ env.BASE_IMAGE_AMD64 }}
          cache-from: type=registry,ref=${{ env.DOCKERHUB_REPO }}:${{ env.BASE_IMAGE_AMD64 }}-cache
          cache-to: type=registry,ref=${{ env.DOCKERHUB_REPO }}:${{ env.BASE_IMAGE_AMD64 }}-cache,mode=max

  build-base-arm64:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.base-changed == 'true' }}
    runs-on: ubuntu-22.04-arm
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push ARM64 base image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.base
          platforms: linux/arm64
          push: true
          tags: ${{ env.DOCKERHUB_REPO }}:${{ env.BASE_IMAGE_ARM64 }}
          cache-from: type=registry,ref=${{ env.DOCKERHUB_REPO }}:${{ env.BASE_IMAGE_ARM64 }}-cache
          cache-to: type=registry,ref=${{ env.DOCKERHUB_REPO }}:${{ env.BASE_IMAGE_ARM64 }}-cache,mode=max

  create-base-manifest:
    needs:
      - build-base-amd64
      - build-base-arm64
    runs-on: ubuntu-latest
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Inspect source images
        run: |
          echo "Inspecting AMD64 image..."
          docker manifest inspect ${{ env.DOCKERHUB_REPO }}:${{ env.BASE_IMAGE_AMD64 }}
          
          echo "Inspection ARM64 image..."
          docker manifest inspect ${{ env.DOCKERHUB_REPO }}:${{ env.BASE_IMAGE_ARM64 }}
      - name: Create Multi-Architecture Manifest
        run: |
          docker buildx imagetools create \
            --tag ${{ env.DOCKERHUB_REPO }}:${{ env.BASE_MANIFEST }} \
            ${{ env.DOCKERHUB_REPO }}:${{ env.BASE_IMAGE_AMD64 }} \
            ${{ env.DOCKERHUB_REPO }}:${{ env.BASE_IMAGE_ARM64 }}
      
      - name: Verify new manifest
        run: |
          echo "Verifying new manifest..."
          docker manifest inspect ${{ env.DOCKERHUB_REPO }}:${{ env.BASE_MANIFEST }}

  # Start the build of app image when needed.
  start-app-phase:
    needs: 
      - detect-changes
      - create-base-manifest
    if: |
      always() &&
      (needs.detect-changes.outputs.app-changed == 'true' || needs.detect-changes.outputs.base-changed == 'true') &&
      (needs.detect-changes.outputs.base-changed != 'true' || needs.create-base-manifest.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Check if base changes are complete
        run: echo "Base changes completed or not required, proceeding with app build"

  # App image build
  build-app-amd64:
    #needs: start-app-phase
    # if: |
    #   always() &&
    #   (needs.detect-changes.outputs.app-changed == 'true' || needs.detect-changes.outputs.base-changed == 'true')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push AMD64 app image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.app
          platforms: linux/amd64
          push: true
          tags: ${{ env.DOCKERHUB_REPO }}:${{ env.APP_IMAGE_AMD64 }}
          cache-from: type=registry,ref=${{ env.DOCKERHUB_REPO }}:${{ env.APP_IMAGE_AMD64 }}-cache
          cache-to: type=registry,ref=${{ env.DOCKERHUB_REPO }}:${{ env.APP_IMAGE_AMD64 }}-cache,mode=max

  build-app-arm64:
    needs: start-app-phase
    runs-on: ubuntu-22.04-arm
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push ARM64 app image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.app
          platforms: linux/arm64
          push: true
          tags: ${{ env.DOCKERHUB_REPO }}:${{ env.APP_IMAGE_ARM64 }}
          cache-from: type=registry,ref=${{ env.DOCKERHUB_REPO }}:${{ env.APP_IMAGE_ARM64 }}-cache
          cache-to: type=registry,ref=${{ env.DOCKERHUB_REPO }}:${{ env.APP_IMAGE_ARM64 }}-cache,mode=max

  create-app-manifest:
    needs: 
      - build-app-amd64
      - build-app-arm64
    runs-on: ubuntu-latest
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Inspect source images
        run: |
          echo "Inspecting AMD64 image..."
          docker manifest inspect ${{ env.DOCKERHUB_REPO }}:${{ env.APP_IMAGE_AMD64 }}
          
          echo "Inspection ARM64 image..."
          docker manifest inspect ${{ env.DOCKERHUB_REPO }}:${{ env.APP_IMAGE_ARM64 }}
      - name: Create Multi-Architecture Manifest
        run: |
          docker buildx imagetools create \
            --tag ${{ env.DOCKERHUB_REPO }}:${{ env.APP_MANIFEST }} \
            ${{ env.DOCKERHUB_REPO }}:${{ env.APP_IMAGE_AMD64 }} \
            ${{ env.DOCKERHUB_REPO }}:${{ env.APP_IMAGE_ARM64 }}
      
      - name: Verify new manifest
        run: |
          echo "Verifying new manifest..."
          docker manifest inspect ${{ env.DOCKERHUB_REPO }}:${{ env.APP_MANIFEST }}
